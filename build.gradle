plugins {
  id "com.github.node-gradle.node" version "3.5.0"
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'java'
	id 'war'
	id 'com.diffplug.spotless' version '6.8.0'
	id "org.sonarqube" version "3.4.0.2513"
	id 'org.ysb33r.doxygen' version '0.7.0'
	id 'jacoco'
	id 'project-report'
 	id 'build-dashboard'
}

group = 'net.ljcomputing'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
   mavenLocal()

    maven {
        url = uri('http://localhost:8081/repository/maven-central')
        allowInsecureProtocol = true
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-autoconfigure'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	// implementation 'org.springframework.boot:spring-boot-starter-security'
	// implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.19.0'
	// implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
  implementation 'org.springframework.boot:spring-boot-actuator'
	implementation 'org.postgresql:postgresql:42.5.1'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'org.seleniumhq.selenium:selenium-java:4.7.2'
  testImplementation 'org.seleniumhq.selenium:selenium-edge-driver:4.7.2'
  testImplementation 'org.seleniumhq.selenium:selenium-chrome-driver:4.7.2'
  testImplementation 'ru.yandex.qatools.ashot:ashot:1.5.4'
}

java {
    withJavadocJar()
    withSourcesJar()
}
 
tasks.withType(JavaCompile) {
  dependsOn spotlessApply
  dependsOn "bundle"
  options.encoding = 'UTF-8'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes (
          'Main-Class': 'net.ljcomputing.contacts.ContactsApplication',
          'Implementation-Title': 'Contacts',
          'Implementation-Version': version
        )
    }
}

spotless {
  java {
    targetExclude("build/**")
    licenseHeaderFile("$rootProject.projectDir/configuration/spotless/license-header.java").updateYearWithLatest(true)
    toggleOffOn()
    trimTrailingWhitespace()
    endWithNewline()
    removeUnusedImports()
    importOrder('java', 'javax', '', '\\#')
    googleJavaFormat('1.15.0').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
  }
  typescript {
    target 'src/main/resources/static/src/**/*.ts' // you have to set the target manually

    prettier().config(['tabWidth': 4])
    licenseHeader '/* James G Willmore - LJ Computing - (C) $YEAR */', '(template|script|class|interface|import|const|declare|export|var) '
  }
}

javadoc {
  exclude("build/generated/sources/**/*.java")
	options.memberLevel = JavadocMemberLevel.PRIVATE
  failOnError(false)
}

doxygen {
  source 'src/main/java'
  project_name 'Contacts'
  generate_latex true
  generate_html true
  optimize_output_java true
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/reports/html/jacoco")
        xml.destination file("${buildDir}/reports/xml/jacoco")
        csv.destination file("${buildDir}/reports/csv/jacoco")
    }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 1.0
      }
    }
  }
}

tasks.named('test') {
	testLogging.showStandardStreams = true
	finalizedBy jacocoTestReport
	useJUnitPlatform()
}

sonarqube {
    properties {
		property "sonar.projectKey", "net.ljcomputing.contacts"
		property "sonar.host.url", "http://localhost:9005"
		property "sonar.login", "sqp_7fb4eb172080342bc8496bff9cb6892740246aa5"
		property 'sonar.verbose', 'true'
		property 'sonar.sourceEncoding', 'UTF-8'
	  property 'sonar.exclusions', 'build/generated-src/**'
  }
}


node {
    // Version of node to use.
    version = '16.18.1'

    // Version of npm to use.
    npmVersion = ''

    // Version of Yarn to use.
    yarnVersion = ''

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'https://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Specifies whether it is acceptable to communicate with the Node.js repository over an insecure HTTP connection.
    // Only used if download is true
    // Change it to true if you use a mirror that uses HTTP rather than HTTPS
    // Or set to null if you want to use Gradle's default behaviour.
    allowInsecureProtocol = null

    // The npm command executed by the npmInstall task
    // By default it is install but it can be changed to ci
    npmInstallCommand = "install"

    // The directory where Node.js is unpacked (when download is true) 
    workDir = file("${project.projectDir}/.gradle/nodejs")

    // The directory where npm is installed (when a specific version is defined)
    npmWorkDir = file("${project.projectDir}/.gradle/npm")

    // The directory where yarn is installed (when a Yarn task is used)
    yarnWorkDir = file("${project.projectDir}/.gradle/yarn")

    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    // By default it is at the root of the current project
    nodeProjectDir = file("${project.projectDir}/src/main/resources/static")

    // Whether the plugin automatically should add the proxy configuration to npm and yarn commands
    // according the proxy configuration defined for Gradle
    // Disable this option if you want to configure the proxy for npm or yarn on your own
    // (in the .npmrc file for instance)
    nodeProxySettings = ProxySettings.SMART
}

task bundle(type: YarnTask) {
    inputs.files(fileTree("${project.projectDir}/src/main/resources/static/node_modules"))
    inputs.files(fileTree("${project.projectDir}/src/main/resources/static/public"))
    inputs.files(fileTree("${project.projectDir}/src/main/resources/static/src"))
    inputs.files(fileTree("${project.projectDir}/src/main/resources/static/package.json"))
    
    outputs.dir("${project.projectDir}/src/main/resources/static/dist")
 
    dependsOn yarn_install
    args = ['run', 'build']
}

task serve(type: YarnTask) {
    args = ['serve']
}

task restart {
  dependsOn 'bundle'
  dependsOn classes
}
